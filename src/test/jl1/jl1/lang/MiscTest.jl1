package jl1.lang

import jl1.IO
import jl1.Error
import jl1.Assert

class MiscTest {

    @test
    def logicalOperators() {
        Assert(true)
        Assert(not false)
        Assert(true and true)
        Assert(not (true and false))
        Assert(not (false and true))
        Assert(not (false and false))
        Assert(true or true)
        Assert(true or false)
        Assert(false or true)
        Assert(not (false or false))
    }

    @test
    def tryCatch() {
        Assert.equal(useTryCatch(true), "An error Hello was thrown")
        Assert.equal(useTryCatch(false), "Nothing was thrown")
    }

    def useTryCatch(trigger: bool): String {
        try {
            if trigger {
                throwSomething()
            }
            "Nothing was thrown"
        } catch e : Error {
            "An error " + e.message + " was thrown"
        }
    }

    def throwSomething() = throw Error("Hello")

    @test
    def lambda() {
        {
            val f: Fn[String] = () -> "Hello from lambda"
            Assert.equal(f.call(), "Hello from lambda")
        }
        {
            val f: Fn[int, int] = i -> i + 2
            Assert.equal(f.call(5), 7)
        }
        {
            val strings = ["abc", "hello", "world", "foobar"]
            val sizes = strings.map(s -> s.size())
            Assert.equal(sizes, [3, 5, 5, 6])
        }
    }
}
