package cj

class Test07String {
    @test
    def charAndInt() = {
        {
            val i : Int = 'H'
            Assert.equal(i, 72)
            Assert.equal(65, 'A')
            Assert.equal(97, 'a')
        }
        Assert.equal('Z'.toInt(), 90)
        Assert.equal((90).toChar(), 'Z')
    }

    @test
    def unicode() = {
        {
            val s = "í•œê¸€"
            Assert.equal(s.size(), 'í•œ'.size() + 'ê¸€'.size())
            Assert.equal(s.charAt(0), 'í•œ')
            Assert.equal(s.charAt(0).toInt(), 0xD55C)
            Assert.equal(s.charAt('í•œ'.size()).toInt(), 0xAE00)
        }
    }

    @test
    def nonBMP() = {
        Assert.that('ðŸ‘Œ'.size() > 1)
        {
            val s = "helloðŸ˜Šworld"
            Assert.that(s.size() > "hello world".size())
            var i = 0
            var chars = List[Char].empty()
            while i < s.size() {
                val ch = s.charAt(i)
                chars.add(ch)
                i += ch.size()
            }
            Assert.equal(chars, [
                'h', 'e', 'l', 'l', 'o', 'ðŸ˜Š', 'w', 'o', 'r', 'l', 'd'
            ])
            Assert.equal(chars, s.iter().toList())
        }
    }
}
