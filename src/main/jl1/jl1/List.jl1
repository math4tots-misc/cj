package jl1

import jl1.IO
import jl1.StringBuilder

class List[T] {

    var array: T[]
    var size: int

    def empty(): Self = Self.new(T[].new(0), 0)

    def fromArray(array: T[]): Self = Self.new(array, array.size())

    def size(this): int = size
    def __getitem(this, i: int): T = array[i]
    def __setitem(this, i: int, t: T) = (array[i] = t)

    def add(this, t: T) {
        if size < array.size() {
            array[size] = t
        } else {
            val newcap = if array.size() { 2 * array.size() } else { 4 }
            array = array.realloc(newcap)
            array[size] = t
        }
        size++
    }

    def __add(this, other: Self): Self {
        val newSize = size + other.size
        val newArray = T[].new(newSize)
        for i = 0; i < size; i++ {
            newArray[i] = array[i]
        }
        for i = 0; i < other.size; i++ {
            newArray[size + i] = other.array[i]
        }
        Self.new(newArray, newSize)
    }

    def toString(this): String {
        val sb = StringBuilder()
        sb.add("[")
        var i = 0
        while i < size {
            if i > 0 {
                sb.add(", ")
            }
            sb.add("" + array[i])
            i = i + 1
        }
        sb.add("]")
        sb.toString()
    }
}
