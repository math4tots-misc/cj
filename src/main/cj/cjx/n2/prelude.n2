
def print[T](t: T) = js!(void, "console.log(''+", t.str(), ")")

def panic(s: str): unreachable = js!(unreachable, "panic(", s, ")")

def __is(a: var, b: var): bool = js!(bool, a, "===", b)

def print2[T](t: T) {
    js!(void, "console.log(''+", t, ")")
}

def __checkIndex(xs: var, i: int): int {
    int len = js!(int, xs, ".length")
    if (i < 0) i = i + len
    if (i < 0 || i >= len) panic("Index out of bounds (i = " + i.repr() + ", len = " + len.repr() + ")")
    i
}

// ============================================================
//     any
// ============================================================
trait any
def any.json(self: var): str = js!(str, "JSON.stringify(", self, ")")
def any.str(self: var): str = repr()
def any.repr(self: var): str = json()

// ============================================================
//     int
// ============================================================
def int.str(self: int): str = self.repr()
def int.repr(self: int): str = js!(str, "''+", self)

// ============================================================
//     str
// ============================================================
def str.len(s: str): int = js!(int, s, ".length")
def str.str(s: str): str = s
def str.repr(s: str): str = js!(str, "JSON.stringify(", s, ")")
def str.get(s: str, i: int): int = js!(int, s, ".charCodeAt(", i, ")")

// ============================================================
//     list
// ============================================================
def list.len[T](self: T[]): int = js!(int, self, ".length")
def list.add[T](self: T[], t: T) = js!(void, self, ".push(", t, ")")
def list.get[T](self: T[], i: int): T = js!(T, self, "[", __checkIndex(self, i), "]")
def list.str[T](self: T[]): str = self.repr()
def list.repr[T](self: T[]): str {
    auto sb = StringBuilder.new()
    sb.add("[")
    for (int i = 0; i < self.len(); i++) {
        if (i) sb.add(", ")
        sb.add(get(i).repr())
    }
    sb.add("]")
    sb.str()
}

// ============================================================
//     StringBuilder
// ============================================================
struct StringBuilder native {}
def StringBuilder.new(): StringBuilder = js!(StringBuilder, "[]")
def StringBuilder.add[T](self: StringBuilder, t: T) = js!(
    void, self, ".push(", t.str(), ")")
def StringBuilder.str(self: StringBuilder): str = js!(str, self, ".join('')")

// ============================================================
//     Tuple
// ============================================================
struct Tuple2[T0, T1] {
    T0 f0
    T1 f1
}
struct Tuple3[T0, T1, T2] {
    T0 f0
    T1 f1
    T2 f2
}

// ============================================================
//     Map
// ============================================================
struct Map[K, V] {
    null[Tuple2[K, V]][] _entries
    int _size
}
def Map.empty[K, V](): Map[K, V] = Map[K, V]([], 0)
def Map.str[K, V](self: Map[K, V]): str = repr()
def Map.repr[K, V](self: Map[K, V]): str = "Map()"
def Map.size[K, V](self: Map[K, V]): int = _size
def Map._getIndex(hash: int, size: int): int = (hash % size + size) % size
def Map._insertNoRehash[K, V](self: Map[K, V], triple: Tuple3[int, K, V]) {
    auto hash = triple.f0
    auto key = triple.f1
    auto list = _entries
    auto index = _getIndex(hash, _size)
    auto bucket = list[index]
    for (i = 0; i < bucket.size(); i++) {
        auto entry = bucket[i]
        if (entry.f0 == hash && entry.f1 == key) {
            bucket[i] = triple
            return ()
        }
    }
    _size = _size + 1
    bucket.add(triple)
}
