

struct Foo {
    int a
    int b
}

int Foo.sum(self: Foo) = a + b

template[T] struct Bar {
    T t
}

int main() {
    auto foo = Foo(a = 3, b = 5)
    print("Hello world!")
    print(2 + 3)
    int a = 2
    auto b = 7
    print(a + b + 7)
    print("foo.a = " + foo.a.str())
    print("foo.b = " + foo.b.str())
    print("foo = " + foo.json())
    print("str.len() = " + "Hello".len().str())
    print2[str]("using print2")
    print("sum = " + foo.sum().str())
    print("list = " + [1, 2, 3].str())
    print("list.len() = " + [1, 2, 3].len().str())

    auto n = null.(null[int])

    auto bar = Bar[str]("Hello bar")
    print("bar = " + bar.json())
    print("bar.t = " + bar.t)

    auto map = Map.empty[int, int]()
    print(map)

    {
        auto list = ["hello", "world"]
        print("list.len() = " + list.str())
    }
    return 0
}
