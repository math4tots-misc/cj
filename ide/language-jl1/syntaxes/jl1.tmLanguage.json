{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "jl1",
	"patterns": [
		{
			"match": "(def\\s+)([a-z_]\\w*)",
			"captures": {
				"1": {
					"name": "keyword.control.jl1"
				},
				"2": {
					"name": "entity.name.function.jl1"
				}
			}
		},
		{
			"include": "#keywords"
		},
		{
			"name": "constant.numeric.jl1",
			"match": "0x[0-9A-Fa-f]+"
		},
		{
			"name": "constant.numeric.jl1",
			"match": "\\d+\\.\\d*|\\.\\d+|\\d+"
		},
		{
			"name": "entity.name.class.jl1",
			"match": "[A-Z]\\w*"
		},
		{
			"comment": "Not perfect, but checks for up to 3 levels of nested '[...]' type args",
			"name": "entity.name.function.jl1",
			"match": "[a-z_]\\w*(?=(\\[([A-Z]\\w*|\\.|,|\\?|\\[([A-Z]\\w*|\\.|,|\\?|\\[([A-Z]\\w*|\\.|,|\\?|\\[\\])*\\])*\\])*\\])?\\()"
		},
		{
			"name": "variable.jl1",
			"match": "[a-z_]\\w*"
		},
		{
			"include": "#strings"
		},
		{
			"comment": "Even though I prefer the coloring with 'constant.character.jl1', bracket matching requires I use string",
			"name": "string.quoted.single.jl1",
			"match": "'\\\\.'|'[^'\\\\]'"
		},
		{
			"name": "comment.jl1",
			"match": "#[^\n]*(\n\\s*#[^\n]*)*"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "storage.type.item.jl1",
					"match": "\\b(class|union|trait|interface|enum)\\b"
				},
				{
					"name": "storage.type.jl1",
					"match": "\\b(enum|var|val)\\b"
				},
				{
					"name": "storage.modifier.jl1",
					"match": "\\b(native|static|private|public|async)\\b"
				},
				{
					"name": "keyword.control.jl1",
					"match": "\\b(throw|try|catch|finally|if|else|import|while|break|continue|new|package|return|and|or|is|not|in|then|switch|case|as|for|when|await)\\b"
				},
				{
					"name": "keyword.operator.jl1",
					"match": "\\b(and|or|is|not|in)\\b"
				},
				{
					"name": "support.other.jl1",
					"match": "\\bself\\b"
				},
				{
					"name": "keyword.other.jl1",
					"match": "\\bSelf\\b"
				},
				{
					"name": "constant.language.jl1",
					"match": "\\b(true|false|null)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.jl1",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.jl1",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.jl1"
}